package streetsphere

import (
	"archive/zip"
	"errors"
	"fmt"
	"html/template"
	"io/ioutil"
	"net/http"
	"time"

	"appengine"
)

var (
	outputTemplate = template.Must(template.ParseFiles("output.html"))
	indexTemplate = template.Must(template.ParseFiles("index.html"))
)

func init() {
	http.HandleFunc("/", errorHandler(rootHandler))
	http.HandleFunc("/upload", errorHandler(uploadHandler))
}

// rootHandler sends an upload form.
func rootHandler(w http.ResponseWriter, r *http.Request) {
	indexTemplate.Execute(w, nil)
}

// uploadHandler retreives the image provided by the user, pads the image,
// generates a HTML file, then stores both files within a ZIP, which is then
// sent in the response.
func uploadHandler(w http.ResponseWriter, r *http.Request) {
	c := appengine.NewContext(r)
	fn := fmt.Sprintf("photosphere-streetview-%d", time.Now().Unix())
	w.Header().Add("Content-Disposition", fmt.Sprintf(`attachment;filename="%s.zip"`, fn))

	err := r.ParseMultipartForm(10 * 1024 * 1024) // 10 MiB limit
	check(err)

	b := r.MultipartForm.File["img"]
	if len(b) < 1 {
		panic(errors.New("could not find image in upload"))
	}

	ir, err := b[0].Open()
	check(err)
	d, err := ioutil.ReadAll(ir)
	check(err)

	zw := zip.NewWriter(w)
	iw, err := zw.Create(fmt.Sprintf("%s/%s", fn, b[0].Filename))
	check(err)

	pano, err := Pad(d, iw)
	check(err)

	hw, err := zw.Create(fmt.Sprintf("%s/streetview.html", fn))
	check(err)

	header := fmt.Sprintf("<!-- Generated by %s.appspot.com -->", appengine.AppID(c))
	err = outputTemplate.Execute(hw, struct {
		ImageFilename string
		Pano          *PanoOpts
		Header        template.HTML
	}{b[0].Filename, pano, template.HTML(header)})
	check(err)

	err = zw.Close()
	check(err)
}

// errorHandler wraps the argument handler with an error-catcher that
// returns a 500 HTTP error if the request fails (calls check with err non-nil).
func errorHandler(fn http.HandlerFunc) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		defer func() {
			if err, ok := recover().(error); ok {
				w.WriteHeader(http.StatusInternalServerError)
				fmt.Fprintf(w, "error: %v", err)
			}
		}()
		fn(w, r)
	}
}

// check aborts the current execution if err is non-nil.
func check(err error) {
	if err != nil {
		panic(err)
	}
}
